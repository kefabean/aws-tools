#!/usr/bin/python

import boto
import sys, getopt
import getpass
from boto import sts
from boto import config
from os.path import expanduser

home = expanduser("~")

def usage():
   print
   print "Usage: mfa [OPTION] PROFILE"
   print
   print "Uses access key and secret key, AWS username, and account number, stored in PROFILE" 
   print "to generate temporary credentials that are stored in the '[PROFILE]-mfa' profile"
   print "for AWSCLI access. The 'default' profile is updated simultaneously for boto API access."
   print "The following options are used to set the username, account and default region"
   print "which are used to identify the MFA device being used to generate th 6-digit one time code:"
   print
   print "-h, --help       display this message"
   print "-u, --user       set AWS user with MFA device to generate credentials in PROFILE"
   print "-a, --account    set AWS account number for temporary credentials in PROFILE"
   print "-r, --region     set region to use with temporary credentials in PROFILE-mfa"
   print

def main(argv):

   try:
      opts, args = getopt.getopt(argv, "hu:a:r:", ["user=", "account=", "region="])
   except getopt.GetoptError:
      usage()
      sys.exit(2)

   if (len(args) > 1) or (len(args) == 0):
      usage()
      sys.exit(2)

   profile = args[0]
   profile_mfa = profile + "-mfa"

   if ( profile[-3:] == 'mfa' ):
      print
      print "ERROR: please provide profile base name without '-mfa' suffix"
      print
      sys.exit(2)

   try:
      boto.config.load_from_path(home + "/.aws/credentials")
   except IOError as e:
      print
      print "ERROR: " + home + "/.aws/credentials cannot be read, please make sure this is set with 'aws configure --profile [PROFILE]'"
      print 
      sys.exit(2)

   if ( not boto.config.has_section(profile) ):
      print "ERROR: profile '" + profile + "' does not exist, please set with 'aws configure --profile [PROFILE]'"
      sys.exit(2)
   if ( not boto.config.has_option(profile, "aws_access_key_id") ) or ( not boto.config.has_option(profile, "aws_secret_access_key") ):
      print "ERROR: credentials do not exist for profile '" + profile + "', please set with 'aws configure --profile [PROFILE]'"
      sys.exit(2)

   for opt, arg in opts:
      if opt in ("-h"):
         usage()
         sys.exit()
      elif opt in ("-u", "--user"):
         boto.config.save_option(home + "/.aws/credentials", profile, "username", arg)
      elif opt in ("-a", "--account"):
         boto.config.save_option(home + "/.aws/credentials", profile, "account_number", arg)
      elif opt in ("-r", "--region"):
         boto.config.save_option(home + "/.aws/credentials", profile, "region", arg)

   username = boto.config.get(profile, "username")
   account_number = boto.config.get(profile, "account_number")
   region = boto.config.get(profile, "region")
   
   if (username == None) or (account_number == None) or (region == None):
      print
      print "ERROR: username, account, or region not set"
      usage()
      sys.exit(2)

   print "\nNOTE: Credentials in [default] and [" + profile_mfa + "] profiles will be overwritten\n"
   mfa_token = getpass.getpass("Enter 6-digit MFA token: ")
   mfa_serial_number = "arn:aws:iam::" + account_number + ":mfa/" + username
   
   # get temporary credentials using long lived credentials and number generated from MFA device 
   sts_conn = boto.sts.STSConnection(profile_name=profile)
   sts_token = sts_conn.get_session_token(duration=28800, mfa_serial_number=mfa_serial_number, mfa_token=mfa_token)
   
   # save temporary credentials to profile with -mfa suffix
   for p in [ profile_mfa, "default" ]:
      boto.config.save_option(home + "/.aws/credentials", p, "aws_access_key_id", sts_token.access_key)
      boto.config.save_option(home + "/.aws/credentials", p, "aws_secret_access_key", sts_token.secret_key)
      boto.config.save_option(home + "/.aws/credentials", p, "aws_security_token", sts_token.session_token)
      boto.config.save_option(home + "/.aws/credentials", p, "expiration", sts_token.expiration)
      boto.config.save_option(home + "/.aws/credentials", p, "region", region)
      boto.config.save_option(home + "/.aws/credentials", p, "account_number", account_number)
      boto.config.save_option(home + "/.aws/credentials", p, "username", username)

   
   print "Temporary credentials updated in [default] and [" + profile_mfa + "] profiles in ~/.aws/credentials"

if __name__ == "__main__":
   main(sys.argv[1:])
