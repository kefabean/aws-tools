#!/usr/bin/python3

import json, sys, getopt, urllib.request, ssl


offer_codes = {
   "AmazonEC2" : {
      "productFamily" : "Compute Instance",
      "attributes" : [ "instanceType", "operatingSystem", "licenseModel" ]
   },
   "AmazonRDS" : {
      "productFamily" : "Database Instance",
      "attributes" : [ "instanceType", "databaseEngine", "licenseModel" ]
   }
}

region = {
   "Asia Pacific (Seoul)":"ap-northeast-2",
   "Asia Pacific (Singapore)":"ap-southeast-1",
   "Asia Pacific (Sydney)":"ap-southeast-2",
   "Asia Pacific (Tokyo)":"ap-northeast-1",
   "AWS GovCloud (US)":"us-gov-1",
   "EU (Frankfurt)":"eu-central-1",
   "EU (Ireland)":"eu-west-1",
   "South America (Sao Paulo)":"sa-east-1",
   "US East (N. Virginia)":"us-east-1",
   "US West (N. California)":"us-west-1",
   "US West (Oregon)":"us-west-2",
   "Asia Pacific (Mumbai)":"ap-south-1",
   "US East (Ohio)":"us-east-2"
}

def chunk_report(bytes_so_far, chunk_size, total_size):
   percent = float(bytes_so_far) / total_size
   percent = round(percent*100, 2)
   sys.stderr.write("Downloaded %d of %d bytes (%0.2f%%)\r" % 
       (bytes_so_far, total_size, percent))
   if bytes_so_far >= total_size:
      sys.stderr.write('\n')


def chunk_read(response, chunk_size=8192, report_hook=None):
   data = ""
   total_size = response.getheader('Content-Length').strip()
   total_size = int(total_size)
   bytes_so_far = 0
   while 1:
      chunk = response.read(chunk_size)
      bytes_so_far += len(chunk)
      data += str(chunk, 'utf8')
      if not chunk:
         break
      if report_hook:
         report_hook(bytes_so_far, chunk_size, total_size)
   return data


def get_output(attr, term, offer, term_type):
   
   if term_type == "Reserved" and not(
         "termAttributes" in term and 
         term['termAttributes']['LeaseContractLength'] == "1yr" and (
            term['termAttributes']['PurchaseOption'] == "All Upfront" or
            term['termAttributes']['PurchaseOption'] == "No Upfront"
         )):
      return
   elif offer == "AmazonEC2" and attr['tenancy'] == "Dedicated":
      return

   price = float(0)
   for price_dimension in term['priceDimensions'].values():
      if price_dimension['unit'].lower() == "quantity":
         price += float(price_dimension['pricePerUnit']['USD'])/(365*24)
      else: 
         price += float(price_dimension['pricePerUnit']['USD'])
   if price == 0:
      return

   if attr.get('preInstalledSw', 'NA') != 'NA':
      return

   if offer == "AmazonEC2":
      fields = [
         region[attr['location']],
         attr['instanceType'],
         attr['operatingSystem'] + " (" +
         attr['licenseModel'] + ")",
         term_type,
         attr['vcpu'],
         attr['memory'],
         attr['networkPerformance']
         ]
   elif offer == "AmazonRDS":
      fields = [
         region[attr['location']],
         attr['instanceType'],
         attr['databaseEngine'] + " " +
         attr.get('databaseEdition', "") + " " + 
         attr['deploymentOption'] + " (" +
         attr['licenseModel'] + ")",
         term_type,
         attr['vcpu'],
         attr['memory'],
         attr['networkPerformance']
         ]

   return fields, attr, price


def main(argv):
   for offer in offer_codes:
      product_family = offer_codes[offer]['productFamily']
      if '-f' not in argv:
         print("Downloading " + offer + " pricing data for " + offer_codes[offer]['productFamily'] , file=sys.stderr)
         url = "https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/" + \
            offer + "/current/index.json"
         response = urllib.request.urlopen(url)
         data = json.loads(chunk_read(response, report_hook=chunk_report))
      else:
         data = json.load(open(offer + ".json"))
      products = data['products']
      variants = {}
      for product_key, product in products.items():
         if "productFamily" in product and \
               "attributes" in product and \
               product_family in product['productFamily']:
            for term_type, terms in data['terms'].items():
               if product_key in terms:
                  for term in terms[product_key].values():
                     output = get_output(product['attributes'], term, offer, term_type) 
                     if output is not None:
                        fields, attr, price = output
                        key = repr(fields)
                        attr['price'] = price
                        if key not in variants:
                           variants[key] = attr 
                           fields.append(price)
                           print(*fields, sep=",")
                        else:
                           sys.stderr.write("The following duplicate output has already been displayed: {0}".format(key))
                           sys.stderr.write("\n\nDetail of original:\n\n")
                           sys.stderr.write(json.dumps(variants[key], indent=2))
                           sys.stderr.write("\n\nDetail of duplicate:\n\n")
                           sys.stderr.write(json.dumps(attr, indent=2))
                           sys.stderr.write("\n\n")
                           if attr['price'] == variants[key]['price']:
                              sys.stderr.write("\n\nNo price difference, ignoring duplicate entry\n\n")
                           else:
                              sys.stderr.write("\n\nERROR: Fatal error, price discrepancy detected for identical output fields\n\n")
                              sys.exit(2)
                     
if __name__ == "__main__":
   main(sys.argv[1:])
